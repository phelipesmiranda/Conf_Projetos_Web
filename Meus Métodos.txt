package paginas;

import static org.junit.Assert.assertEquals;

import java.io.File;
import java.io.IOException;
import java.time.LocalDateTime;
import java.util.concurrent.TimeUnit;

import org.apache.commons.io.FileUtils;
import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;

import junit.framework.Assert;

public class Metodos {

	public static WebDriver driver;

	/**
	 * Abrir navegador e site
	 * 
	 * @author Phelipe S Miranda
	 * @param site
	 * @param navegador
	 * @param descricaoPasso
	 * @throws IOException
	 */
	
	public void abrirNavegador(String site, String navegador, String descricaoPasso) throws IOException {
		
		try {
			if (navegador == "Chrome" || navegador == "Firefox") {
				if (navegador == "Chrome") {
					System.setProperty("webdriver.chrome.driver", "./Drivers/chromedriver.exe");
					driver = new ChromeDriver();
					driver.get(site);
					driver.manage().window().maximize();
				} else if (navegador == "Firefox") {
					System.setProperty("webdriver.gecko.driver", "./Drivers/geckodriver.exe");
					driver = new FirefoxDriver();
					driver.get(site);
					driver.manage().window().maximize();
				}
			} else {
				System.out.println("Opção inválida escolha Chrome ou Firefox");
			}
		} catch (Exception e) {
			printScreenErros("Erro ao tentar -- " + descricaoPasso);
			Assert.fail(LocalDateTime.now() + "  --  Erro ao tentar " + descricaoPasso);
		}
	}

	/**
	 * Escrever
	 * 
	 * @author Phelipe S Miranda
	 * @param elemento
	 * @param texto
	 * @param descricaoPasso
	 * @throws IOException
	 */
	
	public void escrever(By elemento, String texto, String descricaoPasso) throws IOException {
		
		try {
			driver.findElement(elemento).sendKeys(texto);
		} catch (Exception e) {
			printScreenErros("Erro ao tentar -- " + descricaoPasso);
			Assert.fail(LocalDateTime.now() + "  --  Erro ao tentar " + descricaoPasso);
		}
	}
	
	/**
	 * Clicar
	 * 
	 * @author Phelipe S Miranda
	 * @param elemento
	 * @param descricaoPasso
	 * @throws IOException
	 */
	
	public void clicar(By elemento, String descricaoPasso) throws IOException {
		
		try {
			driver.findElement(elemento).click();
		} catch (Exception e) {
			printScreenErros("Erro ao tentar -- " + descricaoPasso);
			Assert.fail(LocalDateTime.now() + "  --  Erro ao tentar " + descricaoPasso);
		}
	}
	
	/**
	 * Submit
	 * 
	 * @author Phelipe S Miranda
	 * @param elemento
	 * @param descricaoPasso
	 * @throws IOException
	 */
	
	public void submit(By elemento, String descricaoPasso) throws IOException {
		
		try {
			driver.findElement(elemento).submit();
		} catch (Exception e) {
			printScreenErros("Erro ao tentar -- " + descricaoPasso);
			Assert.fail(LocalDateTime.now() + "  --  Erro ao tentar " + descricaoPasso);
		}
	}

	/**
	 * Print Screen
	 * 
	 * @author Phelipe S Miranda
	 * @param nomePrint
	 * @throws IOException
	 */
	
	public void printScreen(String nomePrint) throws IOException {

		TakesScreenshot print = ((TakesScreenshot) driver);
		File SrcFile = print.getScreenshotAs(OutputType.FILE);
		File DestFile = new File("./src/Evidências/" + nomePrint + ".png");
		FileUtils.copyFile(SrcFile, DestFile);
	}
	
	/**
	 * Print Screen de Erros
	 * 
	 * @author Phelipe S Miranda
	 * @param nomePrint
	 * @throws IOException
	 */
	
	public void printScreenErros(String descricaoPasso) throws IOException {

		TakesScreenshot print = ((TakesScreenshot) driver);
		File SrcFile = print.getScreenshotAs(OutputType.FILE);
		File DestFile = new File("./src/Evidências/Erros/" + descricaoPasso + ".png");
		FileUtils.copyFile(SrcFile, DestFile);
	}

	/**
	 * Fechar Navegador
	 * 
	 * @author Phelipe S Miranda
	 * @param descricaoPasso
	 * @throws IOException
	 */
	
	public void fecharNavegador(String descricaoPasso) throws IOException {
		
		try {
			driver.quit();
		} catch (Exception e) {
			printScreenErros("Erro ao tentar -- " + descricaoPasso);
			Assert.fail(LocalDateTime.now() + "  --  Erro ao tentar " + descricaoPasso);
		}
	}

	/**
	 * Super Click
	 * 
	 * @author Phelipe S Miranda
	 * @param elemento
	 * @param descricaoDoPasso
	 * @throws IOException
	 */
	
	public void superClick(By elemento, String descricaoPasso) throws IOException {
		
		try {
			superClick((By) driver.findElement(elemento), descricaoPasso);
		} catch (Exception e) {
			printScreenErros("Erro ao tentar -- " + descricaoPasso);
			Assert.fail(LocalDateTime.now() + "  --  Erro ao tentar " + descricaoPasso);
		}
	}

	/**
	 * Clicar no Texto
	 * 
	 * @author Phelipe S Miranda
	 * @param text
	 * @param descriPasso
	 * @throws IOException 
	 */

	public void clicarText(String text, String descricaoPasso) throws IOException {
		
		try {
		driver.findElement(By.linkText(text)).click();
		} catch (Exception e) {
			printScreenErros("Erro ao tentar -- " + descricaoPasso);
			Assert.fail(LocalDateTime.now() + "  --  Erro ao tentar " + descricaoPasso);
		}
}

	/**
	 * Duplo Click
	 * 
	 * @author Phelipe S Miranda
	 * @param elemento
	 * @param descricaoDoPasso
	 * @throws IOException 
	 */

	public void duploCliqueNoElemento(By elemento, String descricaoPasso) throws IOException {
		
		long TIMEOUT = 40;
		Actions action = new Actions(driver);
		try {
			driver.manage().timeouts().pageLoadTimeout(TIMEOUT, TimeUnit.SECONDS);
			action.doubleClick(
					new WebDriverWait(driver, TIMEOUT).until(ExpectedConditions.elementToBeClickable(elemento)));
		} catch (Exception e) {
			printScreenErros("Erro ao tentar -- " + descricaoPasso);
			Assert.fail(LocalDateTime.now() + "  --  Erro ao tentar " + descricaoPasso);
		}
	}

	/**
	 * Selecionar Combo na Posição
	 * 
	 * @author Phelipe S Miranda
	 * @param elemento
	 * @param posicao
	 * @param descricaoDoPasso
	 * @throws IOException 
	 */
	
	public void selecionarComboPosicao(By elemento, int posicao, String descricaoPasso) throws IOException {
		
		try {
			WebElement webElement = driver.findElement(elemento);
			Select combo = new Select(webElement);
			combo.selectByIndex(posicao);
		} catch (Exception e) {
			printScreenErros("Erro ao tentar -- " + descricaoPasso);
			Assert.fail(LocalDateTime.now() + "  --  Erro ao tentar " + descricaoPasso);
		}
	}

	/**
	 * Selecionar Combo no Texto
	 * 
	 * @author Phelipe S Miranda
	 * @param elemento
	 * @param texto
	 * @param descricaoDoPasso
	 * @throws IOException 
	 */
	
	public void selecionarComboTexto(By elemento, String texto, String descricaoPasso) throws IOException {
		
		try {
			WebElement webElement = driver.findElement(elemento);
			Select combo = new Select(webElement);
			combo.selectByVisibleText(texto);
			;
		} catch (Exception e) {
			printScreenErros("Erro ao tentar -- " + descricaoPasso);
			Assert.fail(LocalDateTime.now() + "  --  Erro ao tentar " + descricaoPasso);
		}
	}

	/**
	 * Esperar ser clicável
	 * 
	 * @author Phelipe S Miranda
	 * @param elemento
	 * @param descricaoPasso
	 * @throws IOException 
	 */
	
	public void esperarClicavel(By elemento, String descricaoPasso) throws IOException {
		
		try {
			WebDriverWait wait = new WebDriverWait(driver, 10);
			WebElement el = wait.until(ExpectedConditions.elementToBeClickable(elemento));
		} catch (Exception e) {
			printScreenErros("Erro ao tentar -- " + descricaoPasso);
			Assert.fail(LocalDateTime.now() + "  --  Erro ao tentar " + descricaoPasso);
		}
	}

	/**
	 * Validar Página
	 * 
	 * @author Phelipe S Miranda
	 * @param pagina
	 * @param descricaoPasso
	 * @throws IOException 
	 */
	
	public void validarPagina(String pagina, String descricaoPasso) throws IOException {
		
		try {
			String pag = driver.getTitle();
			assertEquals(pagina, pag);
		} catch (Exception e) {
			printScreenErros("Erro ao tentar -- " + descricaoPasso);
			Assert.fail(LocalDateTime.now() + "  --  Erro ao tentar " + descricaoPasso);
		}
	}

	/**
	 * Validar Texto
	 * 
	 * @author Phelipe S Miranda
	 * @param elemento
	 * @param texto
	 * @param descricaoPasso
	 * @throws IOException 
	 */
	
	public void validarTexto(By elemento, String texto, String descricaoPasso) throws IOException {
		
		try {
			String msg = driver.findElement(elemento).getText();
			assertEquals(texto, msg);
		} catch (Exception e) {
			printScreenErros("Erro ao tentar -- " + descricaoPasso);
			Assert.fail(LocalDateTime.now() + "  --  Erro ao tentar " + descricaoPasso);
		}
	}

	/**
	 * Esperar Escrever Elemento Presente na Tela
	 * 
	 * @author Phelipe S Miranda
	 * 
	 * @param element
	 * @param descricaoPasso
	 * @throws IOException 
	 */

	public void esperarEscrever(By element, String descricaoPasso) throws IOException {
		
		try {
			WebDriverWait wait = new WebDriverWait(driver, 10);
			boolean elemento = wait.until(ExpectedConditions.elementToBeSelected(element));
		} catch (Exception e) {
			printScreenErros("Erro ao tentar -- " + descricaoPasso);
			Assert.fail(LocalDateTime.now() + "  --  Erro ao tentar " + descricaoPasso);
		}
	}

	/**
	 * Pausa
	 * 
	 * @author Phelipe S Miranda
	 * @param tempo
	 * @param descricaoPasso
	 * @throws InterruptedException
	 * @throws IOException
	 */
	
	public void pausa(int tempo, String descricaoPasso) throws InterruptedException, IOException {
		
		try {
			Thread.sleep(tempo);
		} catch (Exception e) {
			printScreenErros("Erro ao tentar -- " + descricaoPasso);
			Assert.fail(LocalDateTime.now() + "  --  Erro ao tentar " + descricaoPasso);
		}
	}

	/**
	 * Esperar Alert na Tela
	 * 
	 * @author Phelipe S Miranda
	 * @param tempo
	 * @param descricaoPasso
	 * @throws IOException 
	 */
	
	public void esperarAlert(int tempo, String descricaoPasso) throws IOException {
		
		try {
			new WebDriverWait(driver, tempo).until(ExpectedConditions.alertIsPresent());
			driver.switchTo().alert().accept();
		} catch (Exception e) {
			printScreenErros("Erro ao tentar -- " + descricaoPasso);
			Assert.fail(LocalDateTime.now() + "  --  Erro ao tentar " + descricaoPasso);
		}
	}
	public void switcPage() {
		driver.switchTo().alert().accept();
	}
	
	/**
	 * Passar o Mouse no Elemento Sem Clicar
	 *
	 * @author Phelipe S Miranda
	 * @param elemento
	 * @param descricaoPasso
	 * @throws IOException
	 */

	public void passarMouse(By elemento, String descricaoPasso) throws IOException {
		
		try {
			Actions action = new Actions(driver);
			WebElement passarMouse = driver.findElement(elemento);
			action.moveToElement(passarMouse).perform();
		} catch (Exception e) {
			printScreenErros("Erro ao tentar -- " + descricaoPasso);
			Assert.fail(LocalDateTime.now() + "  --  Erro ao tentar " + descricaoPasso);
		}
	}

	/**
	 * Pressionar tecla Enter
	 * 
	 * @author Phelipe S Miranda
	 * @param descricaoPasso
	 * @throws IOException
	 */
	
	public void teclaEnter(String descricaoPasso) throws IOException {
		
		try {
			Actions action = new Actions(driver);
			action.sendKeys(Keys.ENTER).perform();
		} catch (Exception e) {
			printScreenErros("Erro ao tentar -- " + descricaoPasso);
			Assert.fail(LocalDateTime.now() + "  --  Erro ao tentar " + descricaoPasso);
		}
	}
	
	/**
	 * Clicar e segurar, mover e soltar com mouse
	 *
	 * @author Phelipe S Miranda
	 * @param elementoOrigem
	 * @param elementoDestino
	 * @param descricaoPasso
	 * @throws IOException
	 */
	
	public void moverElemento(By elementoOrigem, By elementoDestino, String descricaoPasso) throws IOException {
		
		try {
			Actions action = new Actions(driver);
			WebElement origem = driver.findElement(elementoOrigem);
			WebElement destino = driver.findElement(elementoDestino);
			action.dragAndDrop(origem, destino).build().perform();
		} catch (Exception e) {
			printScreenErros("Erro ao tentar -- " + descricaoPasso);
			Assert.fail(LocalDateTime.now() + "  --  Erro ao tentar " + descricaoPasso);
		}
	}
	
}